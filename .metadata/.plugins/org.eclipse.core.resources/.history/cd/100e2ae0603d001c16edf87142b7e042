import java.time.Instant;

public class Fakultaet {


	Instant start; 
	Instant end; 
	
	public static void main(String[] args) {
		System.out.print("Summe rekursiv: ");
		time = System.currentTimeMillis();
		long summeRekursiv = sum(12000);
		zwischenzeit = System.currentTimeMillis();
		System.out.println(summeRekursiv + ", berechnet in " + (zwischenzeit - time) + " Millisekunden");

		System.out.print("Summe endrekursiv: ");
		time = System.currentTimeMillis();
		long summeEndrekursiv = endSum(0, 12000);
		zwischenzeit = System.currentTimeMillis();
		System.out.println(summeEndrekursiv + ", berechnet in " + (zwischenzeit - time) + " Millisekunden");

		System.out.print("Fakultät rekursiv: ");
		time = System.currentTimeMillis();
		long fakRekursiv = faku(35);
		zwischenzeit = System.currentTimeMillis();
		System.out.println(fakRekursiv + ", berechnet in " + (zwischenzeit - time) + " Millisekunden");

		System.out.print("Fakultät endrekursiv: ");
		time = System.currentTimeMillis();
		long fakEndRekursiv = endFaku(1, 35);
		zwischenzeit = System.currentTimeMillis();
		System.out.println(fakEndRekursiv + ", berechnet in " + (zwischenzeit - time) + " Millisekunden");

		System.out.print("Hochfunktion rekursiv: ");
		time = System.currentTimeMillis();
		long powfakRekursiv = powfak(2, 50);
		zwischenzeit = System.currentTimeMillis();
		System.out.println(powfakRekursiv + ", berechnet in " + (zwischenzeit - time) + " Millisekunden");

		System.out.print("Hochfunktion endrekursiv: ");
		time = System.currentTimeMillis();
		long powfakEndrekursiv = endPowfak(1, 2, 50);
		zwischenzeit = System.currentTimeMillis();
		System.out.println(powfakEndrekursiv + ", berechnet in " + (zwischenzeit - time) + " Millisekunden");

	}

	public static long sum(int zahl) {
		if (zahl >= 1) {
			return zahl + sum(zahl - 1);
		}

		return 0;
	}

	public static long endSum(long sum, int zahl) {
		if (zahl == 0) {
			return sum;
		}
		return endSum(sum + zahl, zahl - 1);
	}

	public static long faku(int zahl) {
		if (zahl >= 1) {
			return zahl * faku(zahl - 1);
		}
		return 1;

	}

	public static long endFaku(long prod, int zahl) {
		if (zahl == 0) {
			return prod;
		}
		return endFaku(prod * zahl, zahl - 1);
	}

	public static long powfak(int basis, int exponent) {
		if (exponent >= 1) {
			return basis * powfak(basis, exponent - 1);
		}
		return 1;
	}

	public static long endPowfak(long prod, int basis, int exponent) {
		if (exponent == 0) {
			return prod;
		}
		return endPowfak(prod * basis, basis, exponent - 1);
	}
}
